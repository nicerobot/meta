/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g
 *     -                            On : 2011-04-05 10:59:03
 *     -                for the parser : StruxtObjCParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3 Nov 30, 2010 12:45:30 /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g 2011-04-05 10:59:03

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "StruxtObjCParser.h"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


#pragma mark Cyclic DFA implementation start DFA9
@implementation DFA9
const static NSInteger dfa9_eot[97] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1};
const static NSInteger dfa9_eof[97] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1};
const static unichar dfa9_min[97] =
    {6,6,0,0,7,6,7,6,6,6,7,7,6,16,6,7,16,6,7,6,7,6,6,6,7,7,7,7,7,6,16,6,
     16,7,16,7,7,6,16,6,16,7,16,7,7,6,16,7,16,16,16,6,6,6,7,7,7,6,6,6,7,
     7,7,6,6,7,7,7,7,6,16,7,16,16,16,7,7,6,16,7,16,16,16,16,16,6,6,7,7,6,
     6,7,7,16,16,16,16};
const static unichar dfa9_max[97] =
    {20,28,0,0,7,25,25,11,11,28,7,7,25,25,11,25,25,27,27,29,29,25,25,25,
     25,7,7,7,7,27,27,11,22,27,27,7,7,29,29,11,22,29,29,7,7,25,25,25,25,
     25,25,27,27,27,27,7,7,29,29,29,29,7,7,25,25,7,7,7,7,27,27,27,27,27,
     27,7,7,29,29,29,29,29,29,25,25,27,27,7,7,29,29,7,7,27,27,29,29};
const static NSInteger dfa9_accept[97] =
    {-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1};
const static NSInteger dfa9_special[97] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1};
const static NSInteger dfa9_transition[] = {};
const static NSInteger dfa9_transition0[] = {3, 1, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, -1, -1, -1, 2};
const static NSInteger dfa9_transition1[] = {3, -1, -1, 3, 2, 3, 3, -1, 
 -1, 14};
const static NSInteger dfa9_transition2[] = {13, -1, 12, 13, 13, 13, -1, 
 -1, -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition3[] = {70, -1, 69, 70, 70, 70, -1, 
 -1, -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition4[] = {38, -1, 37, 38, 38, 38, -1, 
 -1, -1, -1, 39, 36, 36, -1, -1, -1, 39, 35, 35, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition5[] = {31, -1, -1, -1, -1, -1, 31, 
 -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition6[] = {49};
const static NSInteger dfa9_transition7[] = {73};
const static NSInteger dfa9_transition8[] = {81};
const static NSInteger dfa9_transition9[] = {83};
const static NSInteger dfa9_transition10[] = {93};
const static NSInteger dfa9_transition11[] = {95};
const static NSInteger dfa9_transition12[] = {80, 79, -1, -1, -1, -1, -1, 
 -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition13[] = {30, -1, 29, 30, 30, 30, -1, 
 -1, -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition14[] = {78, -1, -1, 78, 78, 78, -1, 
 -1, -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition15[] = {39, 92, 92, -1, -1, -1, 39, 
 91, 91, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition16[] = {31, 56, 56, -1, -1, -1, 31, 
 55, 55, 31, -1, 32};
const static NSInteger dfa9_transition17[] = {34, -1, -1, -1, -1, -1, -1, 
 -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition18[] = {13, -1, 12, 13, 13, 13, -1, 
 -1, -1, -1, 3, 11, 11, 3, 2, 3, 3, 10, 10, 14};
const static NSInteger dfa9_transition19[] = {6, 5, -1, 6, 6, 6, -1, -1, 
 -1, -1, 3, 4, 4, 3, 2, 3, 3, -1, -1, -1, 7, -1, 8};
const static NSInteger dfa9_transition20[] = {42, 41, -1, -1, -1, -1, -1, 
 -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition21[] = {50};
const static NSInteger dfa9_transition22[] = {74};
const static NSInteger dfa9_transition23[] = {82};
const static NSInteger dfa9_transition24[] = {84};
const static NSInteger dfa9_transition25[] = {94};
const static NSInteger dfa9_transition26[] = {96};
const static NSInteger dfa9_transition27[] = {38, -1, -1, 38, 38, 38, -1, 
 -1, -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition28[] = {38, -1, 37, 38, 38, 38, -1, 
 -1, -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition29[] = {48, 47, -1, -1, -1, -1, -1, 
 -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition30[] = {70, -1, -1, 70, 70, 70, -1, 
 -1, -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition31[] = {16, -1, -1, -1, -1, -1, -1, 
 -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition32[] = {30, -1, 29, 30, 30, 30, -1, 
 -1, -1, -1, 31, 28, 28, -1, -1, -1, 31, 27, 27, 31, -1, 32};
const static NSInteger dfa9_transition33[] = {46, -1, 45, 46, 46, 46, -1, 
 -1, -1, -1, 3, 44, 44, 3, 2, 3, 3, 43, 43, 14};
const static NSInteger dfa9_transition34[] = {3, 66, 66, 3, 2, 3, 3, 65, 
 65, 14};
const static NSInteger dfa9_transition35[] = {9};
const static NSInteger dfa9_transition36[] = {48, -1, -1, -1, -1, -1, -1, 
 -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition37[] = {72, -1, -1, -1, -1, -1, -1, 
 -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition38[] = {39, -1, -1, -1, -1, -1, 39, 
 -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition39[] = {24, 23, -1, 24, 24, 24};
const static NSInteger dfa9_transition40[] = {3, 26, 26, 3, 2, 3, 3, 25, 
 25, 14};
const static NSInteger dfa9_transition41[] = {72, 71, -1, -1, -1, -1, -1, 
 -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition42[] = {78, -1, 77, 78, 78, 78, -1, 
 -1, -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition43[] = {30, -1, -1, 30, 30, 30, -1, 
 -1, -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition44[] = {18, 17, -1, 18, 18, 18};
const static NSInteger dfa9_transition45[] = {3, -1, -1, 3, 2, 3, 3};
const static NSInteger dfa9_transition46[] = {16, 15, -1, -1, -1, -1, -1, 
 -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition47[] = {34, 33, -1, -1, -1, -1, -1, 
 -1, -1, 31, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, 32};
const static NSInteger dfa9_transition48[] = {31, 88, 88, -1, -1, -1, 31, 
 87, 87, 31, -1, 32};
const static NSInteger dfa9_transition49[] = {70, -1, 69, 70, 70, 70, -1, 
 -1, -1, -1, 31, 68, 68, -1, -1, -1, 31, 67, 67, 31, -1, 32};
const static NSInteger dfa9_transition50[] = {60, 59, -1, 60, 60, 60};
const static NSInteger dfa9_transition51[] = {6, 5, -1, 6, 6, 6, -1, -1, 
 -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, -1, 7, -1, 8};
const static NSInteger dfa9_transition52[] = {46, -1, 45, 46, 46, 46, -1, 
 -1, -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition53[] = {78, -1, 77, 78, 78, 78, -1, 
 -1, -1, -1, 39, 76, 76, -1, -1, -1, 39, 75, 75, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition54[] = {63};
const static NSInteger dfa9_transition55[] = {57};
const static NSInteger dfa9_transition56[] = {51};
const static NSInteger dfa9_transition57[] = {21};
const static NSInteger dfa9_transition58[] = {85};
const static NSInteger dfa9_transition59[] = {89};
const static NSInteger dfa9_transition60[] = {54, 53, -1, 54, 54, 54};
const static NSInteger dfa9_transition61[] = {39, 62, 62, -1, -1, -1, 39, 
 61, 61, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition62[] = {42, -1, -1, -1, -1, -1, -1, 
 -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition63[] = {46, -1, -1, 46, 46, 46, -1, 
 -1, -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition64[] = {64};
const static NSInteger dfa9_transition65[] = {58};
const static NSInteger dfa9_transition66[] = {52};
const static NSInteger dfa9_transition67[] = {22};
const static NSInteger dfa9_transition68[] = {86};
const static NSInteger dfa9_transition69[] = {90};
const static NSInteger dfa9_transition70[] = {13, -1, -1, 13, 13, 13, -1, 
 -1, -1, -1, 3, -1, -1, 3, 2, 3, 3, -1, -1, 14};
const static NSInteger dfa9_transition71[] = {80, -1, -1, -1, -1, -1, -1, 
 -1, -1, 39, -1, -1, -1, -1, -1, 39, -1, -1, 39, -1, -1, -1, 40};
const static NSInteger dfa9_transition72[] = {20, 19, -1, 20, 20, 20};


+ () newDFA9WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
{
    return [[[DFA9 alloc] initWithRecognizer:aRecognizer] retain];
}

- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
{
    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
        decisionNumber = 9;
        eot = dfa9_eot;
        eof = dfa9_eof;
        min = dfa9_min;
        max = dfa9_max;
        accept = dfa9_accept;
        special = dfa9_special;
        if (!(transition = calloc(97, sizeof(void*)))) {
            [self release];
            return nil;
        }
        len = 97;
        transition[0] = dfa9_transition0;
        transition[1] = dfa9_transition19;
        transition[2] = dfa9_transition;
        transition[3] = dfa9_transition;
        transition[4] = dfa9_transition35;
        transition[5] = dfa9_transition18;
        transition[6] = dfa9_transition46;
        transition[7] = dfa9_transition44;
        transition[8] = dfa9_transition72;
        transition[9] = dfa9_transition51;
        transition[10] = dfa9_transition57;
        transition[11] = dfa9_transition67;
        transition[12] = dfa9_transition70;
        transition[13] = dfa9_transition1;
        transition[14] = dfa9_transition39;
        transition[15] = dfa9_transition31;
        transition[16] = dfa9_transition40;
        transition[17] = dfa9_transition32;
        transition[18] = dfa9_transition47;
        transition[19] = dfa9_transition4;
        transition[20] = dfa9_transition20;
        transition[21] = dfa9_transition2;
        transition[22] = dfa9_transition2;
        transition[23] = dfa9_transition33;
        transition[24] = dfa9_transition29;
        transition[25] = dfa9_transition6;
        transition[26] = dfa9_transition21;
        transition[27] = dfa9_transition56;
        transition[28] = dfa9_transition66;
        transition[29] = dfa9_transition43;
        transition[30] = dfa9_transition5;
        transition[31] = dfa9_transition60;
        transition[32] = dfa9_transition45;
        transition[33] = dfa9_transition17;
        transition[34] = dfa9_transition16;
        transition[35] = dfa9_transition55;
        transition[36] = dfa9_transition65;
        transition[37] = dfa9_transition27;
        transition[38] = dfa9_transition38;
        transition[39] = dfa9_transition50;
        transition[40] = dfa9_transition45;
        transition[41] = dfa9_transition62;
        transition[42] = dfa9_transition61;
        transition[43] = dfa9_transition54;
        transition[44] = dfa9_transition64;
        transition[45] = dfa9_transition63;
        transition[46] = dfa9_transition1;
        transition[47] = dfa9_transition36;
        transition[48] = dfa9_transition34;
        transition[49] = dfa9_transition1;
        transition[50] = dfa9_transition1;
        transition[51] = dfa9_transition13;
        transition[52] = dfa9_transition13;
        transition[53] = dfa9_transition49;
        transition[54] = dfa9_transition41;
        transition[55] = dfa9_transition7;
        transition[56] = dfa9_transition22;
        transition[57] = dfa9_transition28;
        transition[58] = dfa9_transition28;
        transition[59] = dfa9_transition53;
        transition[60] = dfa9_transition12;
        transition[61] = dfa9_transition8;
        transition[62] = dfa9_transition23;
        transition[63] = dfa9_transition52;
        transition[64] = dfa9_transition52;
        transition[65] = dfa9_transition9;
        transition[66] = dfa9_transition24;
        transition[67] = dfa9_transition58;
        transition[68] = dfa9_transition68;
        transition[69] = dfa9_transition30;
        transition[70] = dfa9_transition5;
        transition[71] = dfa9_transition37;
        transition[72] = dfa9_transition48;
        transition[73] = dfa9_transition5;
        transition[74] = dfa9_transition5;
        transition[75] = dfa9_transition59;
        transition[76] = dfa9_transition69;
        transition[77] = dfa9_transition14;
        transition[78] = dfa9_transition38;
        transition[79] = dfa9_transition71;
        transition[80] = dfa9_transition15;
        transition[81] = dfa9_transition38;
        transition[82] = dfa9_transition38;
        transition[83] = dfa9_transition1;
        transition[84] = dfa9_transition1;
        transition[85] = dfa9_transition3;
        transition[86] = dfa9_transition3;
        transition[87] = dfa9_transition10;
        transition[88] = dfa9_transition25;
        transition[89] = dfa9_transition42;
        transition[90] = dfa9_transition42;
        transition[91] = dfa9_transition11;
        transition[92] = dfa9_transition26;
        transition[93] = dfa9_transition5;
        transition[94] = dfa9_transition5;
        transition[95] = dfa9_transition38;
        transition[96] = dfa9_transition38;
    }
    return self;
}

- (void) dealloc
{
    free(transition);
    [super dealloc];
}

- (NSString *) description
{
    return @"()* loopback of 35:7: ( node )*";
}


@end /* end DFA9 implementation */

#pragma mark Cyclic DFA implementation end DFA9



#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_xmldecl_in_struxt28;
static const unsigned long long FOLLOW_xmldecl_in_struxt28_data[] = { 0x00000000000000D0LL};
static ANTLRBitSet *FOLLOW_DOC_in_struxt39;
static const unsigned long long FOLLOW_DOC_in_struxt39_data[] = { 0x00000000000000D0LL};
static ANTLRBitSet *FOLLOW_node_in_struxt48;
static const unsigned long long FOLLOW_node_in_struxt48_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_struxt50;
static const unsigned long long FOLLOW_EOF_in_struxt50_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_XML_in_xmldecl71;
static const unsigned long long FOLLOW_XML_in_xmldecl71_data[] = { 0x0000000014000EC0LL};
static ANTLRBitSet *FOLLOW_attributes_in_xmldecl73;
static const unsigned long long FOLLOW_attributes_in_xmldecl73_data[] = { 0x0000000000010000LL};
static ANTLRBitSet *FOLLOW_16_in_xmldecl75;
static const unsigned long long FOLLOW_16_in_xmldecl75_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_tag_in_node94;
static const unsigned long long FOLLOW_tag_in_node94_data[] = { 0x0000000000690000LL};
static ANTLRBitSet *FOLLOW_children_in_node110;
static const unsigned long long FOLLOW_children_in_node110_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STR_in_node120;
static const unsigned long long FOLLOW_STR_in_node120_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_tag149;
static const unsigned long long FOLLOW_ID_in_tag149_data[] = { 0x0000000014060EC2LL};
static ANTLRBitSet *FOLLOW_set_in_tag152;
static const unsigned long long FOLLOW_set_in_tag152_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ID_in_tag160;
static const unsigned long long FOLLOW_ID_in_tag160_data[] = { 0x0000000014000EC2LL};
static ANTLRBitSet *FOLLOW_attributes_in_tag164;
static const unsigned long long FOLLOW_attributes_in_tag164_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_19_in_children183;
static const unsigned long long FOLLOW_19_in_children183_data[] = { 0x00000000001000D0LL};
static ANTLRBitSet *FOLLOW_childs_in_children185;
static const unsigned long long FOLLOW_childs_in_children185_data[] = { 0x0000000000100000LL};
static ANTLRBitSet *FOLLOW_20_in_children187;
static const unsigned long long FOLLOW_20_in_children187_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_21_in_children196;
static const unsigned long long FOLLOW_21_in_children196_data[] = { 0x00000000004100D0LL};
static ANTLRBitSet *FOLLOW_node_in_children198;
static const unsigned long long FOLLOW_node_in_children198_data[] = { 0x00000000004100D0LL};
static ANTLRBitSet *FOLLOW_set_in_children203;
static const unsigned long long FOLLOW_set_in_children203_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_node_in_childs226;
static const unsigned long long FOLLOW_node_in_childs226_data[] = { 0x00000000000000D2LL};
static ANTLRBitSet *FOLLOW_tag_in_childs231;
static const unsigned long long FOLLOW_tag_in_childs231_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute254;
static const unsigned long long FOLLOW_ID_in_attribute254_data[] = { 0x0000000001800000LL};
static ANTLRBitSet *FOLLOW_set_in_attribute256;
static const unsigned long long FOLLOW_set_in_attribute256_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute264;
static const unsigned long long FOLLOW_ID_in_attribute264_data[] = { 0x0000000000000FC2LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute270;
static const unsigned long long FOLLOW_ID_in_attribute270_data[] = { 0x0000000000060FC2LL};
static ANTLRBitSet *FOLLOW_set_in_attribute274;
static const unsigned long long FOLLOW_set_in_attribute274_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute282;
static const unsigned long long FOLLOW_ID_in_attribute282_data[] = { 0x0000000000000FC2LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute289;
static const unsigned long long FOLLOW_OP_in_attribute289_data[] = { 0x0000000000000EC2LL};
static ANTLRBitSet *FOLLOW_value_in_attribute294;
static const unsigned long long FOLLOW_value_in_attribute294_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_value_in_attribute305;
static const unsigned long long FOLLOW_value_in_attribute305_data[] = { 0x0000000000000182LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute309;
static const unsigned long long FOLLOW_OP_in_attribute309_data[] = { 0x0000000000000082LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute315;
static const unsigned long long FOLLOW_ID_in_attribute315_data[] = { 0x0000000001800000LL};
static ANTLRBitSet *FOLLOW_set_in_attribute318;
static const unsigned long long FOLLOW_set_in_attribute318_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute326;
static const unsigned long long FOLLOW_ID_in_attribute326_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute332;
static const unsigned long long FOLLOW_ID_in_attribute332_data[] = { 0x0000000000060002LL};
static ANTLRBitSet *FOLLOW_set_in_attribute335;
static const unsigned long long FOLLOW_set_in_attribute335_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ID_in_attribute343;
static const unsigned long long FOLLOW_ID_in_attribute343_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_set_in_value370;
static const unsigned long long FOLLOW_set_in_value370_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes403;
static const unsigned long long FOLLOW_attribute_in_attributes403_data[] = { 0x0000000002000002LL};
static ANTLRBitSet *FOLLOW_25_in_attributes407;
static const unsigned long long FOLLOW_25_in_attributes407_data[] = { 0x0000000000000EC0LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes409;
static const unsigned long long FOLLOW_attribute_in_attributes409_data[] = { 0x0000000002000002LL};
static ANTLRBitSet *FOLLOW_26_in_attributes419;
static const unsigned long long FOLLOW_26_in_attributes419_data[] = { 0x0000000000000EC0LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes421;
static const unsigned long long FOLLOW_attribute_in_attributes421_data[] = { 0x000000000A410000LL};
static ANTLRBitSet *FOLLOW_set_in_attributes425;
static const unsigned long long FOLLOW_set_in_attributes425_data[] = { 0x0000000000000EC0LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes433;
static const unsigned long long FOLLOW_attribute_in_attributes433_data[] = { 0x000000000A410000LL};
static ANTLRBitSet *FOLLOW_27_in_attributes437;
static const unsigned long long FOLLOW_27_in_attributes437_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_28_in_attributes445;
static const unsigned long long FOLLOW_28_in_attributes445_data[] = { 0x0000000000000EC0LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes447;
static const unsigned long long FOLLOW_attribute_in_attributes447_data[] = { 0x0000000022410000LL};
static ANTLRBitSet *FOLLOW_set_in_attributes451;
static const unsigned long long FOLLOW_set_in_attributes451_data[] = { 0x0000000000000EC0LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes459;
static const unsigned long long FOLLOW_attribute_in_attributes459_data[] = { 0x0000000022410000LL};
static ANTLRBitSet *FOLLOW_29_in_attributes463;
static const unsigned long long FOLLOW_29_in_attributes463_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

#pragma mark Rule return scopes start
/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */



@implementation StruxtObjCParser  // line 637

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_xmldecl_in_struxt28 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_xmldecl_in_struxt28_data Count:(NSUInteger)1] retain];
    FOLLOW_DOC_in_struxt39 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DOC_in_struxt39_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_struxt48 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_struxt48_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_struxt50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_struxt50_data Count:(NSUInteger)1] retain];
    FOLLOW_XML_in_xmldecl71 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_XML_in_xmldecl71_data Count:(NSUInteger)1] retain];
    FOLLOW_attributes_in_xmldecl73 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attributes_in_xmldecl73_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_xmldecl75 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_xmldecl75_data Count:(NSUInteger)1] retain];
    FOLLOW_tag_in_node94 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_tag_in_node94_data Count:(NSUInteger)1] retain];
    FOLLOW_children_in_node110 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_children_in_node110_data Count:(NSUInteger)1] retain];
    FOLLOW_STR_in_node120 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STR_in_node120_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_tag149 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_tag149_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_tag152 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_tag152_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_tag160 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_tag160_data Count:(NSUInteger)1] retain];
    FOLLOW_attributes_in_tag164 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attributes_in_tag164_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_children183 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_children183_data Count:(NSUInteger)1] retain];
    FOLLOW_childs_in_children185 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_childs_in_children185_data Count:(NSUInteger)1] retain];
    FOLLOW_20_in_children187 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_children187_data Count:(NSUInteger)1] retain];
    FOLLOW_21_in_children196 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_children196_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_children198 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_children198_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_children203 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_children203_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_childs226 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_childs226_data Count:(NSUInteger)1] retain];
    FOLLOW_tag_in_childs231 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_tag_in_childs231_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute254 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute254_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attribute256 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attribute256_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute264 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute264_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute270 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute270_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attribute274 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attribute274_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute282 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute282_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute289 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute289_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_attribute294 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_attribute294_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_attribute305 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_attribute305_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute309 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute309_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute315 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute315_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attribute318 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attribute318_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute326 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute326_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute332 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute332_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attribute335 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attribute335_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_attribute343 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_attribute343_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_value370 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_value370_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes403 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes403_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_attributes407 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_attributes407_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes409 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes409_data Count:(NSUInteger)1] retain];
    FOLLOW_26_in_attributes419 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_attributes419_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes421 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes421_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attributes425 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attributes425_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes433 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes433_data Count:(NSUInteger)1] retain];
    FOLLOW_27_in_attributes437 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_27_in_attributes437_data Count:(NSUInteger)1] retain];
    FOLLOW_28_in_attributes445 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_attributes445_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes447 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes447_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attributes451 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attributes451_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes459 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes459_data Count:(NSUInteger)1] retain];
    FOLLOW_29_in_attributes463 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_29_in_attributes463_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"DOC", @"XML", @"STR", @"ID", @"OP", @"INT", @"FLOAT", @"CHAR", @"COMMENT", 
 @"WS", @"EXPONENT", @"HEX_DIGIT", @"'.'", @"'@'", @"'\\\\'", @"'{'", @"'}'", 
 @"':'", @"';'", @"'!'", @"'#'", @"','", @"'('", @"')'", @"'['", @"']'", nil] retain]];
}

+ (StruxtObjCParser *)newStruxtObjCParser:(id<ANTLRTokenStream>)aStream
{
    return [[StruxtObjCParser alloc] initWithTokenStream:aStream];

}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:9+1] retain]]) != nil) {


        dfa9 = [DFA9 newDFA9WithRecognizer:self];

        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [dfa9 release];
    [super dealloc];
}
// start actions.actionScope.methods
// start methods()
// start rules
/*
 * $ANTLR start struxt
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:7:1: struxt : (xml= xmldecl )? (doctype= DOC )? node EOF ;
 */
- (void) struxt
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *doctype = nil;
        String xml = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:5: ( (xml= xmldecl )? (doctype= DOC )? node EOF ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:7: (xml= xmldecl )? (doctype= DOC )? node EOF // alt
        {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:10: (xml= xmldecl )? // block
        NSInteger alt1=2;
        NSInteger LA1_0 = [input LA:1];

        if ( (LA1_0==XML) ) {
            alt1=1;
        }
        switch (alt1) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:10: xml= xmldecl // alt
                {
                [self pushFollow:FOLLOW_xmldecl_in_struxt28];
                xml = [self xmldecl];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:9:14: (doctype= DOC )? // block
        NSInteger alt2=2;
        NSInteger LA2_0 = [input LA:1];

        if ( (LA2_0==DOC) ) {
            alt2=1;
        }
        switch (alt2) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:9:14: doctype= DOC // alt
                {
                doctype=(ANTLRCommonToken *)[self match:input TokenType:DOC Follow:FOLLOW_DOC_in_struxt39];   /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
        [self pushFollow:FOLLOW_node_in_struxt48];
        [self node];
        [self popFollow];

          /* element() */
        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_struxt50];   /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end struxt */
/*
 * $ANTLR start xmldecl
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:13:1: xmldecl returns [String attrs] : XML attributes '.' ;
 */
- (String) xmldecl
{
    /* ruleScopeSetUp */

    String attrs = nil;

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:14:5: ( XML attributes '.' ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:14:7: XML attributes '.' // alt
        {
        [self match:input TokenType:XML Follow:FOLLOW_XML_in_xmldecl71];   /* element() */
        [self pushFollow:FOLLOW_attributes_in_xmldecl73];
        [self attributes];
        [self popFollow];

          /* element() */
        [self match:input TokenType:16 Follow:FOLLOW_16_in_xmldecl75];   /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return attrs;
}
/* $ANTLR end xmldecl */
/*
 * $ANTLR start node
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:17:1: node : (tagname= tag children | text= STR );
 */
- (void) node
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *text = nil;
        String tagname = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:18:5: (tagname= tag children | text= STR ) //ruleblock
        NSInteger alt3=2;
        NSInteger LA3_0 = [input LA:1];

        if ( (LA3_0==ID) ) {
            alt3=1;
        }
        else if ( (LA3_0==STR) ) {
            alt3=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:3 state:0 stream:input];
            @throw nvae;
        }
        switch (alt3) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:18:7: tagname= tag children // alt
                {
                [self pushFollow:FOLLOW_tag_in_node94];
                tagname = [self tag];
                [self popFollow];

                  /* element() */
                [self pushFollow:FOLLOW_children_in_node110];
                [self children];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:21:7: text= STR // alt
                {
                text=(ANTLRCommonToken *)[self match:input TokenType:STR Follow:FOLLOW_STR_in_node120];   /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end node */
/*
 * $ANTLR start tag
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:25:1: tag returns [String tagname] : nodename= ID ( ( '@' | '\\\\' ) ns= ID )? ( attributes )? ;
 */
- (String) tag
{
    /* ruleScopeSetUp */

    String tagname = nil;

    @try {
        ANTLRCommonToken *nodename = nil;
        ANTLRCommonToken *ns = nil;

        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:5: (nodename= ID ( ( '@' | '\\\\' ) ns= ID )? ( attributes )? ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:7: nodename= ID ( ( '@' | '\\\\' ) ns= ID )? ( attributes )? // alt
        {
        nodename=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_tag149];   /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:19: ( ( '@' | '\\\\' ) ns= ID )? // block
        NSInteger alt4=2;
        NSInteger LA4_0 = [input LA:1];

        if ( ((LA4_0>=17 && LA4_0<=18)) ) {
            alt4=1;
        }
        switch (alt4) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:20: ( '@' | '\\\\' ) ns= ID // alt
                {
                if ((([input LA:1] >= 17) && ([input LA:1] <= 18))) {
                    [input consume];
                    [state setIsErrorRecovery:NO];
                } else {
                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                    @throw mse;
                }
                  /* element() */
                ns=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_tag160];   /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:39: ( attributes )? // block
        NSInteger alt5=2;
        NSInteger LA5_0 = [input LA:1];

        if ( ((LA5_0>=STR && LA5_0<=ID)||(LA5_0>=INT && LA5_0<=CHAR)||LA5_0==26||LA5_0==28) ) {
            alt5=1;
        }
        switch (alt5) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:26:39: attributes // alt
                {
                [self pushFollow:FOLLOW_attributes_in_tag164];
                [self attributes];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return tagname;
}
/* $ANTLR end tag */
/*
 * $ANTLR start children
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:29:10: fragment children : ( '{' childs '}' | ( ':' ( node )* )? ( '.' | ';' ) );
 */
- (void) children
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:30:5: ( '{' childs '}' | ( ':' ( node )* )? ( '.' | ';' ) ) //ruleblock
        NSInteger alt8=2;
        NSInteger LA8_0 = [input LA:1];

        if ( (LA8_0==19) ) {
            alt8=1;
        }
        else if ( (LA8_0==16||(LA8_0>=21 && LA8_0<=22)) ) {
            alt8=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:8 state:0 stream:input];
            @throw nvae;
        }
        switch (alt8) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:30:7: '{' childs '}' // alt
                {
                [self match:input TokenType:19 Follow:FOLLOW_19_in_children183];   /* element() */
                [self pushFollow:FOLLOW_childs_in_children185];
                [self childs];
                [self popFollow];

                  /* element() */
                [self match:input TokenType:20 Follow:FOLLOW_20_in_children187];   /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:31:7: ( ':' ( node )* )? ( '.' | ';' ) // alt
                {
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:31:7: ( ':' ( node )* )? // block
                NSInteger alt7=2;
                NSInteger LA7_0 = [input LA:1];

                if ( (LA7_0==21) ) {
                    alt7=1;
                }
                switch (alt7) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:31:8: ':' ( node )* // alt
                        {
                        [self match:input TokenType:21 Follow:FOLLOW_21_in_children196];   /* element() */
                        do {
                            NSInteger alt6=2;
                            NSInteger LA6_0 = [input LA:1];
                            if ( ((LA6_0>=STR && LA6_0<=ID)) ) {
                                alt6=1;
                            }


                            switch (alt6) {
                                case 1 : ;
                                    // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:31:12: node // alt
                                    {
                                    [self pushFollow:FOLLOW_node_in_children198];
                                    [self node];
                                    [self popFollow];

                                      /* element() */
                                     /* elements */
                                    }
                                    break;

                                default :
                                    goto loop6;
                            }
                        } while (YES);
                        loop6: ;
                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                if ([input LA:1] == 16||[input LA:1] == 22) {
                    [input consume];
                    [state setIsErrorRecovery:NO];
                } else {
                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                    @throw mse;
                }
                  /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end children */
/*
 * $ANTLR start childs
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:34:10: fragment childs : ( node )* (nodename= tag )? ;
 */
- (void) childs
{
    /* ruleScopeSetUp */

    @try {
        String nodename = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:35:5: ( ( node )* (nodename= tag )? ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:35:7: ( node )* (nodename= tag )? // alt
        {
        do {
            NSInteger alt9=2;
            alt9 = [dfa9 predict:input];
            switch (alt9) {
                case 1 : ;
                    // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:35:7: node // alt
                    {
                    [self pushFollow:FOLLOW_node_in_childs226];
                    [self node];
                    [self popFollow];

                      /* element() */
                     /* elements */
                    }
                    break;

                default :
                    goto loop9;
            }
        } while (YES);
        loop9: ;
          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:35:21: (nodename= tag )? // block
        NSInteger alt10=2;
        NSInteger LA10_0 = [input LA:1];

        if ( (LA10_0==ID) ) {
            alt10=1;
        }
        switch (alt10) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:35:21: nodename= tag // alt
                {
                [self pushFollow:FOLLOW_tag_in_childs231];
                nodename = [self tag];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end childs */
/*
 * $ANTLR start attribute
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:10: fragment attribute : ( (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? ) (o= OP )? (v= value )? | v= value (o= OP )? (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? )? );
 */
- (void) attribute
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *ns = nil;
        ANTLRCommonToken *name = nil;
        ANTLRCommonToken *o = nil;
        Token v = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:5: ( (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? ) (o= OP )? (v= value )? | v= value (o= OP )? (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? )? ) //ruleblock
        NSInteger alt18=2;
        NSInteger LA18_0 = [input LA:1];

        if ( (LA18_0==ID) ) {
            alt18=1;
        }
        else if ( (LA18_0==STR||(LA18_0>=INT && LA18_0<=CHAR)) ) {
            alt18=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:18 state:0 stream:input];
            @throw nvae;
        }
        switch (alt18) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:7: (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? ) (o= OP )? (v= value )? // alt
                {
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:7: (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? ) // block
                NSInteger alt12=2;
                NSInteger LA12_0 = [input LA:1];

                if ( (LA12_0==ID) ) {
                    NSInteger LA12_1 = [input LA:2];

                    if ( ((LA12_1>=23 && LA12_1<=24)) ) {
                        alt12=1;
                    }
                    else if ( (LA12_1==STR||(LA12_1>=OP && LA12_1<=CHAR)||(LA12_1>=16 && LA12_1<=22)||LA12_1==25||LA12_1==27||LA12_1==29) ) {
                        alt12=2;
                    }
                    else {
                        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:12 state:1 stream:input];
                        @throw nvae;
                    }
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:12 state:0 stream:input];
                    @throw nvae;
                }
                switch (alt12) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:8: ns= ID ( '!' | '#' ) name= ID // alt
                        {
                        ns=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute254];   /* element() */
                        if ((([input LA:1] >= 23) && ([input LA:1] <= 24))) {
                            [input consume];
                            [state setIsErrorRecovery:NO];
                        } else {
                            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                            @throw mse;
                        }
                          /* element() */
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute264];   /* element() */
                         /* elements */
                        }
                        break;
                    case 2 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:34: name= ID ( ( '@' | '\\\\' ) ns= ID )? // alt
                        {
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute270];   /* element() */
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:42: ( ( '@' | '\\\\' ) ns= ID )? // block
                        NSInteger alt11=2;
                        NSInteger LA11_0 = [input LA:1];

                        if ( ((LA11_0>=17 && LA11_0<=18)) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 : ;
                                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:44: ( '@' | '\\\\' ) ns= ID // alt
                                {
                                if ((([input LA:1] >= 17) && ([input LA:1] <= 18))) {
                                    [input consume];
                                    [state setIsErrorRecovery:NO];
                                } else {
                                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                    @throw mse;
                                }
                                  /* element() */
                                ns=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute282];   /* element() */
                                 /* elements */
                                }
                                break;

                        }
                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:65: (o= OP )? // block
                NSInteger alt13=2;
                NSInteger LA13_0 = [input LA:1];

                if ( (LA13_0==OP) ) {
                    alt13=1;
                }
                switch (alt13) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:65: o= OP // alt
                        {
                        o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute289];   /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:71: (v= value )? // block
                NSInteger alt14=2;
                NSInteger LA14_0 = [input LA:1];

                if ( (LA14_0==STR||(LA14_0>=INT && LA14_0<=CHAR)) ) {
                    alt14=1;
                }
                switch (alt14) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:71: v= value // alt
                        {
                        [self pushFollow:FOLLOW_value_in_attribute294];
                        v = [self value];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:7: v= value (o= OP )? (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? )? // alt
                {
                [self pushFollow:FOLLOW_value_in_attribute305];
                v = [self value];
                [self popFollow];

                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:16: (o= OP )? // block
                NSInteger alt15=2;
                NSInteger LA15_0 = [input LA:1];

                if ( (LA15_0==OP) ) {
                    alt15=1;
                }
                switch (alt15) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:16: o= OP // alt
                        {
                        o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute309];   /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:21: (ns= ID ( '!' | '#' ) name= ID | name= ID ( ( '@' | '\\\\' ) ns= ID )? )? // block
                NSInteger alt17=3;
                NSInteger LA17_0 = [input LA:1];

                if ( (LA17_0==ID) ) {
                    NSInteger LA17_1 = [input LA:2];

                    if ( ((LA17_1>=23 && LA17_1<=24)) ) {
                        alt17=1;
                    }
                    else if ( ((LA17_1>=16 && LA17_1<=22)||LA17_1==25||LA17_1==27||LA17_1==29) ) {
                        alt17=2;
                    }
                }
                switch (alt17) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:22: ns= ID ( '!' | '#' ) name= ID // alt
                        {
                        ns=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute315];   /* element() */
                        if ((([input LA:1] >= 23) && ([input LA:1] <= 24))) {
                            [input consume];
                            [state setIsErrorRecovery:NO];
                        } else {
                            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                            @throw mse;
                        }
                          /* element() */
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute326];   /* element() */
                         /* elements */
                        }
                        break;
                    case 2 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:49: name= ID ( ( '@' | '\\\\' ) ns= ID )? // alt
                        {
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute332];   /* element() */
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:57: ( ( '@' | '\\\\' ) ns= ID )? // block
                        NSInteger alt16=2;
                        NSInteger LA16_0 = [input LA:1];

                        if ( ((LA16_0>=17 && LA16_0<=18)) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                            case 1 : ;
                                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:58: ( '@' | '\\\\' ) ns= ID // alt
                                {
                                if ((([input LA:1] >= 17) && ([input LA:1] <= 18))) {
                                    [input consume];
                                    [state setIsErrorRecovery:NO];
                                } else {
                                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                    @throw mse;
                                }
                                  /* element() */
                                ns=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_attribute343];   /* element() */
                                 /* elements */
                                }
                                break;

                        }
                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end attribute */
/*
 * $ANTLR start value
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:43:10: fragment value returns [Token value] : ( STR | INT | FLOAT | CHAR ) ;
 */
- (Token) value
{
    /* ruleScopeSetUp */

    Token value = nil;

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:5: ( ( STR | INT | FLOAT | CHAR ) ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:7: ( STR | INT | FLOAT | CHAR ) // alt
        {
        if ([input LA:1] == STR||(([input LA:1] >= INT) && ([input LA:1] <= CHAR))) {
            [input consume];
            [state setIsErrorRecovery:NO];
        } else {
            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
            @throw mse;
        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return value;
}
/* $ANTLR end value */
/*
 * $ANTLR start attributes
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:47:10: fragment attributes : ( attribute ( ',' attribute )* | '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' | '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' );
 */
- (void) attributes
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:48:5: ( attribute ( ',' attribute )* | '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' | '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' ) //ruleblock
        NSInteger alt22=3;
        switch ([input LA:1]) {
            case STR: ;
            case ID: ;
            case INT: ;
            case FLOAT: ;
            case CHAR: ;
                {
                alt22=1;
                }
                break;
            case 26: ;
                {
                alt22=2;
                }
                break;
            case 28: ;
                {
                alt22=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:22 state:0 stream:input];
            @throw nvae;
        }

        switch (alt22) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:48:7: attribute ( ',' attribute )* // alt
                {
                [self pushFollow:FOLLOW_attribute_in_attributes403];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt19=2;
                    NSInteger LA19_0 = [input LA:1];
                    if ( (LA19_0==25) ) {
                        alt19=1;
                    }


                    switch (alt19) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:48:19: ',' attribute // alt
                            {
                            [self match:input TokenType:25 Follow:FOLLOW_25_in_attributes407];   /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes409];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop19;
                    }
                } while (YES);
                loop19: ;
                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:49:7: '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' // alt
                {
                [self match:input TokenType:26 Follow:FOLLOW_26_in_attributes419];   /* element() */
                [self pushFollow:FOLLOW_attribute_in_attributes421];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt20=2;
                    NSInteger LA20_0 = [input LA:1];
                    if ( (LA20_0==16||LA20_0==22||LA20_0==25) ) {
                        alt20=1;
                    }


                    switch (alt20) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:49:23: ( ',' | ';' | '.' ) attribute // alt
                            {
                            if ([input LA:1] == 16||[input LA:1] == 22||[input LA:1] == 25) {
                                [input consume];
                                [state setIsErrorRecovery:NO];
                            } else {
                                ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                @throw mse;
                            }
                              /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes433];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop20;
                    }
                } while (YES);
                loop20: ;
                  /* element() */
                [self match:input TokenType:27 Follow:FOLLOW_27_in_attributes437];   /* element() */
                 /* elements */
                }
                break;
            case 3 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:50:7: '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' // alt
                {
                [self match:input TokenType:28 Follow:FOLLOW_28_in_attributes445];   /* element() */
                [self pushFollow:FOLLOW_attribute_in_attributes447];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt21=2;
                    NSInteger LA21_0 = [input LA:1];
                    if ( (LA21_0==16||LA21_0==22||LA21_0==25) ) {
                        alt21=1;
                    }


                    switch (alt21) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:50:23: ( ',' | ';' | '.' ) attribute // alt
                            {
                            if ([input LA:1] == 16||[input LA:1] == 22||[input LA:1] == 25) {
                                [input consume];
                                [state setIsErrorRecovery:NO];
                            } else {
                                ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                @throw mse;
                            }
                              /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes459];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop21;
                    }
                } while (YES);
                loop21: ;
                  /* element() */
                [self match:input TokenType:29 Follow:FOLLOW_29_in_attributes463];   /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end attributes */

@end /* end of StruxtObjCParser implementation line 692 */


/* End of code
 * =============================================================================
 */
