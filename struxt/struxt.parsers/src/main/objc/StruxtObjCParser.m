/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:46:29
 *
 *     -  From the grammar source file : /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g
 *     -                            On : 2011-04-19 00:05:01
 *     -                for the parser : StruxtObjCParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3 Nov 30, 2010 12:46:29 /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g 2011-04-19 00:05:01

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "StruxtObjCParser.h"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


#pragma mark Cyclic DFA implementation start DFA8
@implementation DFA8
const static NSInteger dfa8_eot[171] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa8_eof[171] =
    {-1,3,-1,-1,-1,-1,3,3,-1,-1,-1,3,3,-1,-1,3,3,-1,3,3,3,3,-1,-1,-1,-1,
     -1,-1,3,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa8_min[171] =
    {6,7,0,0,9,9,7,7,9,7,7,7,7,9,9,9,19,7,9,8,8,19,7,7,9,7,7,9,7,7,8,7,7,
     9,9,9,9,9,9,9,9,19,7,19,9,8,8,19,9,9,9,19,7,19,9,8,8,19,9,9,9,9,9,19,
     9,8,8,19,19,19,19,19,7,7,8,7,7,9,9,9,9,9,7,7,8,7,7,9,9,9,9,9,19,19,
     7,7,8,9,9,9,9,9,9,9,9,9,19,9,8,8,19,19,19,19,19,9,9,9,9,9,19,9,8,8,
     19,19,19,19,19,9,9,19,19,19,19,19,19,7,7,8,9,9,9,9,19,19,7,7,8,9,9,
     9,9,19,19,9,9,19,19,19,19,9,9,19,19,19,19,19,19,19,19};
const static unichar dfa8_max[171] =
    {21,27,0,0,9,9,24,24,14,14,14,27,27,9,9,24,24,14,24,24,24,24,26,26,14,
     28,28,14,24,24,24,24,24,14,9,9,9,9,9,9,26,26,14,23,26,26,26,26,9,9,
     28,28,14,23,28,28,28,28,9,9,9,9,24,24,24,24,24,24,24,24,24,24,26,26,
     26,26,26,14,9,9,9,9,28,28,28,28,28,14,9,9,9,9,24,24,24,24,24,9,9,9,
     9,9,9,9,9,26,26,26,26,26,26,26,26,26,26,9,9,9,9,28,28,28,28,28,28,28,
     28,28,28,9,9,24,24,24,24,26,26,26,26,26,9,9,9,9,28,28,28,28,28,9,9,
     9,9,24,24,9,9,26,26,26,26,9,9,28,28,28,28,26,26,28,28};
const static NSInteger dfa8_accept[171] =
    {-1,-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa8_special[171] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa8_transition[] = {};
const static NSInteger dfa8_transition0[] = {52, -1, -1, -1, 52, 52, -1, 
 -1, -1, 53};
const static NSInteger dfa8_transition1[] = {3, -1, -1, 1, -1, 3, 3, 3, 
 3, -1, -1, -1, -1, -1, -1, 2};
const static NSInteger dfa8_transition2[] = {3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition3[] = {105, 103, -1, 104, 106, 106, 
 106, 106, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition4[] = {62, -1, -1, -1, 63, 63, 63, 
 63, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition5[] = {115, -1, 116, -1, -1, -1, -1, 
 -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition6[] = {24, -1, 22, -1, 23, 23, 23, 
 23};
const static NSInteger dfa8_transition7[] = {40, 38, -1, 39, 41, 41, 41, 
 41, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition8[] = {30, -1, 16, 16, 16, 16, -1, 
 -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition9[] = {77, -1, 75, -1, 76, 76, 76, 
 76};
const static NSInteger dfa8_transition10[] = {78, -1, 79, -1, -1, -1, -1, 
 -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition11[] = {66, -1, 67, 67, 67, 67};
const static NSInteger dfa8_transition12[] = {56, -1, 57, 57, 57, 57};
const static NSInteger dfa8_transition13[] = {20, -1, 21, 21, 21, 21};
const static NSInteger dfa8_transition14[] = {46, -1, 47, 47, 47, 47};
const static NSInteger dfa8_transition15[] = {109, -1, 110, 110, 110, 110};
const static NSInteger dfa8_transition16[] = {123, -1, 124, 124, 124, 124};
const static NSInteger dfa8_transition17[] = {169};
const static NSInteger dfa8_transition18[] = {167};
const static NSInteger dfa8_transition19[] = {165};
const static NSInteger dfa8_transition20[] = {163};
const static NSInteger dfa8_transition21[] = {159};
const static NSInteger dfa8_transition22[] = {157};
const static NSInteger dfa8_transition23[] = {153};
const static NSInteger dfa8_transition24[] = {144};
const static NSInteger dfa8_transition25[] = {135};
const static NSInteger dfa8_transition26[] = {133};
const static NSInteger dfa8_transition27[] = {131};
const static NSInteger dfa8_transition28[] = {70};
const static NSInteger dfa8_transition29[] = {68};
const static NSInteger dfa8_transition30[] = {11};
const static NSInteger dfa8_transition31[] = {92};
const static NSInteger dfa8_transition32[] = {111};
const static NSInteger dfa8_transition33[] = {113};
const static NSInteger dfa8_transition34[] = {125};
const static NSInteger dfa8_transition35[] = {127};
const static NSInteger dfa8_transition36[] = {50, 48, -1, 49, 51, 51, 51, 
 51, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition37[] = {27, -1, 25, -1, 26, 26, 26, 
 26};
const static NSInteger dfa8_transition38[] = {140, -1, 141, -1, -1, -1, 
 -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition39[] = {87, -1, 85, -1, 86, 86, 86, 
 86};
const static NSInteger dfa8_transition40[] = {96, -1, 63, 63, 63, 63, -1, 
 -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition41[] = {99, -1, 100, -1, -1, -1, -1, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition42[] = {42, -1, -1, -1, 42, 42, -1, 
 43};
const static NSInteger dfa8_transition43[] = {50, -1, -1, -1, 51, 51, 51, 
 51, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition44[] = {105, -1, -1, -1, 106, 106, 
 106, 106, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition45[] = {108, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition46[] = {19, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition47[] = {62, 60, -1, 61, 63, 63, 63, 
 63, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition48[] = {146};
const static NSInteger dfa8_transition49[] = {137};
const static NSInteger dfa8_transition50[] = {82};
const static NSInteger dfa8_transition51[] = {72};
const static NSInteger dfa8_transition52[] = {28};
const static NSInteger dfa8_transition53[] = {94};
const static NSInteger dfa8_transition54[] = {8, -1, 6, -1, 7, 7, 7, 7, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, -1, 9, -1, 10};
const static NSInteger dfa8_transition55[] = {55, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition56[] = {170};
const static NSInteger dfa8_transition57[] = {168};
const static NSInteger dfa8_transition58[] = {166};
const static NSInteger dfa8_transition59[] = {164};
const static NSInteger dfa8_transition60[] = {160};
const static NSInteger dfa8_transition61[] = {158};
const static NSInteger dfa8_transition62[] = {154};
const static NSInteger dfa8_transition63[] = {145};
const static NSInteger dfa8_transition64[] = {136};
const static NSInteger dfa8_transition65[] = {134};
const static NSInteger dfa8_transition66[] = {132};
const static NSInteger dfa8_transition67[] = {71};
const static NSInteger dfa8_transition68[] = {69};
const static NSInteger dfa8_transition69[] = {12};
const static NSInteger dfa8_transition70[] = {8, 4, 6, 5, 7, 7, 7, 7, -1, 
 -1, -1, -1, 3, 3, 2, 3, 3, -1, 9, -1, 10};
const static NSInteger dfa8_transition71[] = {93};
const static NSInteger dfa8_transition72[] = {112};
const static NSInteger dfa8_transition73[] = {114};
const static NSInteger dfa8_transition74[] = {126};
const static NSInteger dfa8_transition75[] = {128};
const static NSInteger dfa8_transition76[] = {148, -1, 120, 120, 120, 120, 
 -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition77[] = {151, -1, 152, -1, -1, -1, 
 -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition78[] = {36, -1, 37, -1, -1, -1, -1, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition79[] = {155, -1, 156, -1, -1, -1, 
 -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition80[] = {74, -1, 41, 41, 41, 41, -1, 
 -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition81[] = {44, -1, 45, -1, -1, -1, -1, 
 -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition82[] = {121, -1, 122, -1, -1, -1, 
 -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition83[] = {18, -1, 19, -1, -1, -1, -1, 
 -1, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition84[] = {33, -1, 31, -1, 32, 32, 32, 
 32};
const static NSInteger dfa8_transition85[] = {40, -1, -1, -1, 41, 41, 41, 
 41, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition86[] = {3, 3, 2, 3, 3};
const static NSInteger dfa8_transition87[] = {88, -1, 89, -1, -1, -1, -1, 
 -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition88[] = {84, -1, 51, 51, 51, 51, -1, 
 -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition89[] = {119, 117, -1, 118, 120, 120, 
 120, 120, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition90[] = {15, -1, -1, -1, 16, 16, 16, 
 16, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition91[] = {34, -1, 35, -1, -1, -1, -1, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition92[] = {58, -1, 59, -1, -1, -1, -1, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition93[] = {54, -1, 55, -1, -1, -1, -1, 
 -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition94[] = {15, 13, -1, 14, 16, 16, 16, 
 16, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition95[] = {45, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition96[] = {149, -1, 150, -1, -1, -1, 
 -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition97[] = {122, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition98[] = {147};
const static NSInteger dfa8_transition99[] = {138};
const static NSInteger dfa8_transition100[] = {73};
const static NSInteger dfa8_transition101[] = {29};
const static NSInteger dfa8_transition102[] = {83};
const static NSInteger dfa8_transition103[] = {95};
const static NSInteger dfa8_transition104[] = {90, -1, 91, -1, -1, -1, -1, 
 -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition105[] = {129, -1, 130, -1, -1, -1, 
 -1, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition106[] = {97, -1, 98, -1, -1, -1, -1, 
 -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition107[] = {101, -1, 102, -1, -1, -1, 
 -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition108[] = {119, -1, -1, -1, 120, 120, 
 120, 120, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};
const static NSInteger dfa8_transition109[] = {64, -1, 65, -1, -1, -1, -1, 
 -1, -1, -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition110[] = {139, -1, 106, 106, 106, 106, 
 -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition111[] = {80, -1, 81, -1, -1, -1, -1, 
 -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition112[] = {65, -1, -1, -1, -1, -1, -1, 
 -1, -1, -1, 3, 3, 2, 3, 3, 17};
const static NSInteger dfa8_transition113[] = {142, -1, 143, -1, -1, -1, 
 -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition114[] = {107, -1, 108, -1, -1, -1, 
 -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, 42, -1, 43};
const static NSInteger dfa8_transition115[] = {161, -1, 162, -1, -1, -1, 
 -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, 52, -1, -1, -1, 53};


+ () newDFA8WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
{
    return [[[DFA8 alloc] initWithRecognizer:aRecognizer] retain];
}

- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
{
    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
        decisionNumber = 8;
        eot = dfa8_eot;
        eof = dfa8_eof;
        min = dfa8_min;
        max = dfa8_max;
        accept = dfa8_accept;
        special = dfa8_special;
        if (!(transition = calloc(171, sizeof(void*)))) {
            [self release];
            return nil;
        }
        len = 171;
        transition[0] = dfa8_transition1;
        transition[1] = dfa8_transition70;
        transition[2] = dfa8_transition;
        transition[3] = dfa8_transition;
        transition[4] = dfa8_transition30;
        transition[5] = dfa8_transition69;
        transition[6] = dfa8_transition94;
        transition[7] = dfa8_transition83;
        transition[8] = dfa8_transition13;
        transition[9] = dfa8_transition6;
        transition[10] = dfa8_transition37;
        transition[11] = dfa8_transition54;
        transition[12] = dfa8_transition54;
        transition[13] = dfa8_transition52;
        transition[14] = dfa8_transition101;
        transition[15] = dfa8_transition8;
        transition[16] = dfa8_transition2;
        transition[17] = dfa8_transition84;
        transition[18] = dfa8_transition46;
        transition[19] = dfa8_transition91;
        transition[20] = dfa8_transition78;
        transition[21] = dfa8_transition2;
        transition[22] = dfa8_transition7;
        transition[23] = dfa8_transition81;
        transition[24] = dfa8_transition14;
        transition[25] = dfa8_transition36;
        transition[26] = dfa8_transition93;
        transition[27] = dfa8_transition12;
        transition[28] = dfa8_transition90;
        transition[29] = dfa8_transition90;
        transition[30] = dfa8_transition92;
        transition[31] = dfa8_transition47;
        transition[32] = dfa8_transition109;
        transition[33] = dfa8_transition11;
        transition[34] = dfa8_transition29;
        transition[35] = dfa8_transition68;
        transition[36] = dfa8_transition28;
        transition[37] = dfa8_transition67;
        transition[38] = dfa8_transition51;
        transition[39] = dfa8_transition100;
        transition[40] = dfa8_transition80;
        transition[41] = dfa8_transition42;
        transition[42] = dfa8_transition9;
        transition[43] = dfa8_transition86;
        transition[44] = dfa8_transition95;
        transition[45] = dfa8_transition10;
        transition[46] = dfa8_transition111;
        transition[47] = dfa8_transition42;
        transition[48] = dfa8_transition50;
        transition[49] = dfa8_transition102;
        transition[50] = dfa8_transition88;
        transition[51] = dfa8_transition0;
        transition[52] = dfa8_transition39;
        transition[53] = dfa8_transition86;
        transition[54] = dfa8_transition55;
        transition[55] = dfa8_transition87;
        transition[56] = dfa8_transition104;
        transition[57] = dfa8_transition0;
        transition[58] = dfa8_transition31;
        transition[59] = dfa8_transition71;
        transition[60] = dfa8_transition53;
        transition[61] = dfa8_transition103;
        transition[62] = dfa8_transition40;
        transition[63] = dfa8_transition2;
        transition[64] = dfa8_transition112;
        transition[65] = dfa8_transition106;
        transition[66] = dfa8_transition41;
        transition[67] = dfa8_transition2;
        transition[68] = dfa8_transition2;
        transition[69] = dfa8_transition2;
        transition[70] = dfa8_transition2;
        transition[71] = dfa8_transition2;
        transition[72] = dfa8_transition85;
        transition[73] = dfa8_transition85;
        transition[74] = dfa8_transition107;
        transition[75] = dfa8_transition3;
        transition[76] = dfa8_transition114;
        transition[77] = dfa8_transition15;
        transition[78] = dfa8_transition32;
        transition[79] = dfa8_transition72;
        transition[80] = dfa8_transition33;
        transition[81] = dfa8_transition73;
        transition[82] = dfa8_transition43;
        transition[83] = dfa8_transition43;
        transition[84] = dfa8_transition5;
        transition[85] = dfa8_transition89;
        transition[86] = dfa8_transition82;
        transition[87] = dfa8_transition16;
        transition[88] = dfa8_transition34;
        transition[89] = dfa8_transition74;
        transition[90] = dfa8_transition35;
        transition[91] = dfa8_transition75;
        transition[92] = dfa8_transition2;
        transition[93] = dfa8_transition2;
        transition[94] = dfa8_transition4;
        transition[95] = dfa8_transition4;
        transition[96] = dfa8_transition105;
        transition[97] = dfa8_transition27;
        transition[98] = dfa8_transition66;
        transition[99] = dfa8_transition26;
        transition[100] = dfa8_transition65;
        transition[101] = dfa8_transition25;
        transition[102] = dfa8_transition64;
        transition[103] = dfa8_transition49;
        transition[104] = dfa8_transition99;
        transition[105] = dfa8_transition110;
        transition[106] = dfa8_transition42;
        transition[107] = dfa8_transition45;
        transition[108] = dfa8_transition38;
        transition[109] = dfa8_transition113;
        transition[110] = dfa8_transition42;
        transition[111] = dfa8_transition42;
        transition[112] = dfa8_transition42;
        transition[113] = dfa8_transition42;
        transition[114] = dfa8_transition42;
        transition[115] = dfa8_transition24;
        transition[116] = dfa8_transition63;
        transition[117] = dfa8_transition48;
        transition[118] = dfa8_transition98;
        transition[119] = dfa8_transition76;
        transition[120] = dfa8_transition0;
        transition[121] = dfa8_transition97;
        transition[122] = dfa8_transition96;
        transition[123] = dfa8_transition77;
        transition[124] = dfa8_transition0;
        transition[125] = dfa8_transition0;
        transition[126] = dfa8_transition0;
        transition[127] = dfa8_transition0;
        transition[128] = dfa8_transition0;
        transition[129] = dfa8_transition23;
        transition[130] = dfa8_transition62;
        transition[131] = dfa8_transition2;
        transition[132] = dfa8_transition2;
        transition[133] = dfa8_transition2;
        transition[134] = dfa8_transition2;
        transition[135] = dfa8_transition42;
        transition[136] = dfa8_transition42;
        transition[137] = dfa8_transition44;
        transition[138] = dfa8_transition44;
        transition[139] = dfa8_transition79;
        transition[140] = dfa8_transition22;
        transition[141] = dfa8_transition61;
        transition[142] = dfa8_transition21;
        transition[143] = dfa8_transition60;
        transition[144] = dfa8_transition0;
        transition[145] = dfa8_transition0;
        transition[146] = dfa8_transition108;
        transition[147] = dfa8_transition108;
        transition[148] = dfa8_transition115;
        transition[149] = dfa8_transition20;
        transition[150] = dfa8_transition59;
        transition[151] = dfa8_transition19;
        transition[152] = dfa8_transition58;
        transition[153] = dfa8_transition2;
        transition[154] = dfa8_transition2;
        transition[155] = dfa8_transition18;
        transition[156] = dfa8_transition57;
        transition[157] = dfa8_transition42;
        transition[158] = dfa8_transition42;
        transition[159] = dfa8_transition42;
        transition[160] = dfa8_transition42;
        transition[161] = dfa8_transition17;
        transition[162] = dfa8_transition56;
        transition[163] = dfa8_transition0;
        transition[164] = dfa8_transition0;
        transition[165] = dfa8_transition0;
        transition[166] = dfa8_transition0;
        transition[167] = dfa8_transition42;
        transition[168] = dfa8_transition42;
        transition[169] = dfa8_transition0;
        transition[170] = dfa8_transition0;
    }
    return self;
}

- (void) dealloc
{
    free(transition);
    [super dealloc];
}

- (NSString *) description
{
    return @"()* loopback of 33:7: ( node )*";
}


@end /* end DFA8 implementation */

#pragma mark Cyclic DFA implementation end DFA8

#pragma mark Cyclic DFA implementation start DFA15
@implementation DFA15
const static NSInteger dfa15_eot[11] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa15_eof[11] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa15_min[11] =
    {7,7,0,0,9,9,9,0,7,7,0};
const static unichar dfa15_max[11] =
    {14,28,0,0,9,9,28,0,28,28,0};
const static NSInteger dfa15_accept[11] =
    {-1,-1,2,4,-1,-1,-1,1,-1,-1,3};
const static NSInteger dfa15_special[11] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa15_transition[] = {};
const static NSInteger dfa15_transition0[] = {10, -1, 7, 7, 7, 7, -1, -1, 
 -1, -1, 7, 7, 7, 7, 7, 7, -1, 7, -1, 7};
const static NSInteger dfa15_transition1[] = {9};
const static NSInteger dfa15_transition2[] = {6, 4, -1, 5, 7, 7, 7, 7, -1, 
 -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, 7, -1, 7};
const static NSInteger dfa15_transition3[] = {6, -1, -1, -1, 7, 7, 7, 7, 
 -1, -1, -1, -1, 7, 7, 7, 7, 7, 7, -1, 7, -1, 7};
const static NSInteger dfa15_transition4[] = {3, -1, 1, -1, 2, 2, 2, 2};
const static NSInteger dfa15_transition5[] = {8};


+ () newDFA15WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
{
    return [[[DFA15 alloc] initWithRecognizer:aRecognizer] retain];
}

- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
{
    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
        decisionNumber = 15;
        eot = dfa15_eot;
        eof = dfa15_eof;
        min = dfa15_min;
        max = dfa15_max;
        accept = dfa15_accept;
        special = dfa15_special;
        if (!(transition = calloc(11, sizeof(void*)))) {
            [self release];
            return nil;
        }
        len = 11;
        transition[0] = dfa15_transition4;
        transition[1] = dfa15_transition2;
        transition[2] = dfa15_transition;
        transition[3] = dfa15_transition;
        transition[4] = dfa15_transition5;
        transition[5] = dfa15_transition1;
        transition[6] = dfa15_transition0;
        transition[7] = dfa15_transition;
        transition[8] = dfa15_transition3;
        transition[9] = dfa15_transition3;
        transition[10] = dfa15_transition;
    }
    return self;
}

- (void) dealloc
{
    free(transition);
    [super dealloc];
}

- (NSString *) description
{
    return @"36:10: fragment attribute : (n= name (o= OP )? (v= value )? | v= value (o= OP )? (n= name )? | n= name o= OP n1= name | o= OP (n= name | v= value ) );";
}


@end /* end DFA15 implementation */

#pragma mark Cyclic DFA implementation end DFA15



#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_xmldecl_in_struxt32;
static const unsigned long long FOLLOW_xmldecl_in_struxt32_data[] = { 0x0000000000007A50LL};
static ANTLRBitSet *FOLLOW_DOC_in_struxt43;
static const unsigned long long FOLLOW_DOC_in_struxt43_data[] = { 0x0000000000007A50LL};
static ANTLRBitSet *FOLLOW_node_in_struxt52;
static const unsigned long long FOLLOW_node_in_struxt52_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_struxt54;
static const unsigned long long FOLLOW_EOF_in_struxt54_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_XML_in_xmldecl71;
static const unsigned long long FOLLOW_XML_in_xmldecl71_data[] = { 0x000000000A007A80LL};
static ANTLRBitSet *FOLLOW_attributes_in_xmldecl73;
static const unsigned long long FOLLOW_attributes_in_xmldecl73_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_19_in_xmldecl75;
static const unsigned long long FOLLOW_19_in_xmldecl75_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_tag_in_node92;
static const unsigned long long FOLLOW_tag_in_node92_data[] = { 0x0000000000D80000LL};
static ANTLRBitSet *FOLLOW_children_in_node94;
static const unsigned long long FOLLOW_children_in_node94_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_value_in_node104;
static const unsigned long long FOLLOW_value_in_node104_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_CDATA_in_node114;
static const unsigned long long FOLLOW_CDATA_in_node114_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_name_in_tag133;
static const unsigned long long FOLLOW_name_in_tag133_data[] = { 0x000000000A007A82LL};
static ANTLRBitSet *FOLLOW_attributes_in_tag135;
static const unsigned long long FOLLOW_attributes_in_tag135_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_20_in_children154;
static const unsigned long long FOLLOW_20_in_children154_data[] = { 0x0000000000207A50LL};
static ANTLRBitSet *FOLLOW_childs_in_children156;
static const unsigned long long FOLLOW_childs_in_children156_data[] = { 0x0000000000200000LL};
static ANTLRBitSet *FOLLOW_21_in_children158;
static const unsigned long long FOLLOW_21_in_children158_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_22_in_children167;
static const unsigned long long FOLLOW_22_in_children167_data[] = { 0x0000000000887A50LL};
static ANTLRBitSet *FOLLOW_node_in_children169;
static const unsigned long long FOLLOW_node_in_children169_data[] = { 0x0000000000887A50LL};
static ANTLRBitSet *FOLLOW_set_in_children174;
static const unsigned long long FOLLOW_set_in_children174_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_node_in_childs199;
static const unsigned long long FOLLOW_node_in_childs199_data[] = { 0x0000000000007A52LL};
static ANTLRBitSet *FOLLOW_tag_in_childs204;
static const unsigned long long FOLLOW_tag_in_childs204_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_name_in_attribute226;
static const unsigned long long FOLLOW_name_in_attribute226_data[] = { 0x0000000000007882LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute230;
static const unsigned long long FOLLOW_OP_in_attribute230_data[] = { 0x0000000000007802LL};
static ANTLRBitSet *FOLLOW_value_in_attribute235;
static const unsigned long long FOLLOW_value_in_attribute235_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_value_in_attribute246;
static const unsigned long long FOLLOW_value_in_attribute246_data[] = { 0x0000000000000282LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute250;
static const unsigned long long FOLLOW_OP_in_attribute250_data[] = { 0x0000000000000202LL};
static ANTLRBitSet *FOLLOW_name_in_attribute255;
static const unsigned long long FOLLOW_name_in_attribute255_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_name_in_attribute266;
static const unsigned long long FOLLOW_name_in_attribute266_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute270;
static const unsigned long long FOLLOW_OP_in_attribute270_data[] = { 0x0000000000000200LL};
static ANTLRBitSet *FOLLOW_name_in_attribute274;
static const unsigned long long FOLLOW_name_in_attribute274_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_OP_in_attribute284;
static const unsigned long long FOLLOW_OP_in_attribute284_data[] = { 0x0000000000007A00LL};
static ANTLRBitSet *FOLLOW_name_in_attribute289;
static const unsigned long long FOLLOW_name_in_attribute289_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_value_in_attribute293;
static const unsigned long long FOLLOW_value_in_attribute293_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ns_in_name320;
static const unsigned long long FOLLOW_ns_in_name320_data[] = { 0x0000000000000100LL};
static ANTLRBitSet *FOLLOW_PRENS_in_name322;
static const unsigned long long FOLLOW_PRENS_in_name322_data[] = { 0x0000000000000200LL};
static ANTLRBitSet *FOLLOW_ID_in_name326;
static const unsigned long long FOLLOW_ID_in_name326_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_name332;
static const unsigned long long FOLLOW_ID_in_name332_data[] = { 0x0000000000000402LL};
static ANTLRBitSet *FOLLOW_POSTNS_in_name336;
static const unsigned long long FOLLOW_POSTNS_in_name336_data[] = { 0x0000000000000200LL};
static ANTLRBitSet *FOLLOW_ns_in_name340;
static const unsigned long long FOLLOW_ns_in_name340_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_ns368;
static const unsigned long long FOLLOW_ID_in_ns368_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_set_in_value393;
static const unsigned long long FOLLOW_set_in_value393_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes426;
static const unsigned long long FOLLOW_attribute_in_attributes426_data[] = { 0x0000000001000002LL};
static ANTLRBitSet *FOLLOW_24_in_attributes430;
static const unsigned long long FOLLOW_24_in_attributes430_data[] = { 0x0000000000007A80LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes432;
static const unsigned long long FOLLOW_attribute_in_attributes432_data[] = { 0x0000000001000002LL};
static ANTLRBitSet *FOLLOW_25_in_attributes442;
static const unsigned long long FOLLOW_25_in_attributes442_data[] = { 0x0000000000007A80LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes444;
static const unsigned long long FOLLOW_attribute_in_attributes444_data[] = { 0x0000000005880000LL};
static ANTLRBitSet *FOLLOW_set_in_attributes448;
static const unsigned long long FOLLOW_set_in_attributes448_data[] = { 0x0000000000007A80LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes456;
static const unsigned long long FOLLOW_attribute_in_attributes456_data[] = { 0x0000000005880000LL};
static ANTLRBitSet *FOLLOW_26_in_attributes460;
static const unsigned long long FOLLOW_26_in_attributes460_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_27_in_attributes468;
static const unsigned long long FOLLOW_27_in_attributes468_data[] = { 0x0000000000007A80LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes470;
static const unsigned long long FOLLOW_attribute_in_attributes470_data[] = { 0x0000000011880000LL};
static ANTLRBitSet *FOLLOW_set_in_attributes474;
static const unsigned long long FOLLOW_set_in_attributes474_data[] = { 0x0000000000007A80LL};
static ANTLRBitSet *FOLLOW_attribute_in_attributes482;
static const unsigned long long FOLLOW_attribute_in_attributes482_data[] = { 0x0000000011880000LL};
static ANTLRBitSet *FOLLOW_28_in_attributes486;
static const unsigned long long FOLLOW_28_in_attributes486_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

#pragma mark Rule return scopes start
/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */

/* returnScope */
@implementation StruxtObjCParser_name_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize namespace;
@synthesize nodename;
+ (StruxtObjCParser_name_return *)newStruxtObjCParser_name_return
{
    return [[[StruxtObjCParser_name_return alloc] init] retain];
}

/* start of iterate get and set functions */



- (Token)getnamespace { return( namespace ); }

- (void)setnamespace:(Token)aVal { namespace = aVal; }




- (Token)getnodename { return( nodename ); }

- (void)setnodename:(Token)aVal { nodename = aVal; }



// End of iterate get and set functions



@end /* end of returnScope implementation */

/* returnScope */

/* returnScope */

/* returnScope */



@implementation StruxtObjCParser  // line 637

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_xmldecl_in_struxt32 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_xmldecl_in_struxt32_data Count:(NSUInteger)1] retain];
    FOLLOW_DOC_in_struxt43 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DOC_in_struxt43_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_struxt52 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_struxt52_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_struxt54 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_struxt54_data Count:(NSUInteger)1] retain];
    FOLLOW_XML_in_xmldecl71 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_XML_in_xmldecl71_data Count:(NSUInteger)1] retain];
    FOLLOW_attributes_in_xmldecl73 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attributes_in_xmldecl73_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_xmldecl75 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_xmldecl75_data Count:(NSUInteger)1] retain];
    FOLLOW_tag_in_node92 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_tag_in_node92_data Count:(NSUInteger)1] retain];
    FOLLOW_children_in_node94 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_children_in_node94_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_node104 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_node104_data Count:(NSUInteger)1] retain];
    FOLLOW_CDATA_in_node114 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_CDATA_in_node114_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_tag133 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_tag133_data Count:(NSUInteger)1] retain];
    FOLLOW_attributes_in_tag135 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attributes_in_tag135_data Count:(NSUInteger)1] retain];
    FOLLOW_20_in_children154 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_children154_data Count:(NSUInteger)1] retain];
    FOLLOW_childs_in_children156 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_childs_in_children156_data Count:(NSUInteger)1] retain];
    FOLLOW_21_in_children158 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_children158_data Count:(NSUInteger)1] retain];
    FOLLOW_22_in_children167 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_children167_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_children169 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_children169_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_children174 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_children174_data Count:(NSUInteger)1] retain];
    FOLLOW_node_in_childs199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_node_in_childs199_data Count:(NSUInteger)1] retain];
    FOLLOW_tag_in_childs204 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_tag_in_childs204_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_attribute226 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_attribute226_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute230 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute230_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_attribute235 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_attribute235_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_attribute246 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_attribute246_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute250 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute250_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_attribute255 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_attribute255_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_attribute266 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_attribute266_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute270 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute270_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_attribute274 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_attribute274_data Count:(NSUInteger)1] retain];
    FOLLOW_OP_in_attribute284 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OP_in_attribute284_data Count:(NSUInteger)1] retain];
    FOLLOW_name_in_attribute289 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_name_in_attribute289_data Count:(NSUInteger)1] retain];
    FOLLOW_value_in_attribute293 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_value_in_attribute293_data Count:(NSUInteger)1] retain];
    FOLLOW_ns_in_name320 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ns_in_name320_data Count:(NSUInteger)1] retain];
    FOLLOW_PRENS_in_name322 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_PRENS_in_name322_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_name326 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_name326_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_name332 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_name332_data Count:(NSUInteger)1] retain];
    FOLLOW_POSTNS_in_name336 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_POSTNS_in_name336_data Count:(NSUInteger)1] retain];
    FOLLOW_ns_in_name340 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ns_in_name340_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_ns368 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_ns368_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_value393 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_value393_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes426 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes426_data Count:(NSUInteger)1] retain];
    FOLLOW_24_in_attributes430 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_attributes430_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes432 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes432_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_attributes442 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_attributes442_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes444 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes444_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attributes448 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attributes448_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes456 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes456_data Count:(NSUInteger)1] retain];
    FOLLOW_26_in_attributes460 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_attributes460_data Count:(NSUInteger)1] retain];
    FOLLOW_27_in_attributes468 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_27_in_attributes468_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes470 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes470_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_attributes474 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_attributes474_data Count:(NSUInteger)1] retain];
    FOLLOW_attribute_in_attributes482 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_attribute_in_attributes482_data Count:(NSUInteger)1] retain];
    FOLLOW_28_in_attributes486 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_attributes486_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"DOC", @"XML", @"CDATA", @"OP", @"PRENS", @"ID", @"POSTNS", @"STR", @"INT", 
 @"FLOAT", @"CHAR", @"COMMENT", @"WS", @"EXPONENT", @"HEX_DIGIT", @"'.'", 
 @"'{'", @"'}'", @"':'", @"';'", @"','", @"'('", @"')'", @"'['", @"']'", nil] retain]];
}

+ (StruxtObjCParser *)newStruxtObjCParser:(id<ANTLRTokenStream>)aStream
{
    return [[StruxtObjCParser alloc] initWithTokenStream:aStream];

}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:11+1] retain]]) != nil) {


        dfa8 = [DFA8 newDFA8WithRecognizer:self];
        dfa15 = [DFA15 newDFA15WithRecognizer:self];

        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [dfa8 release];
    [dfa15 release];
    [super dealloc];
}
// start actions.actionScope.methods
// start methods()
// start rules
/*
 * $ANTLR start struxt
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:7:1: struxt returns [StruxtObjCParser self] : (xml= xmldecl )? (doctype= DOC )? node EOF ;
 */
- (StruxtObjCParser) struxt
{
    /* ruleScopeSetUp */

    StruxtObjCParser self = nil;

    @try {
        ANTLRCommonToken *doctype = nil;

        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:5: ( (xml= xmldecl )? (doctype= DOC )? node EOF ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:7: (xml= xmldecl )? (doctype= DOC )? node EOF // alt
        {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:10: (xml= xmldecl )? // block
        NSInteger alt1=2;
        NSInteger LA1_0 = [input LA:1];

        if ( (LA1_0==XML) ) {
            alt1=1;
        }
        switch (alt1) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:8:10: xml= xmldecl // alt
                {
                [self pushFollow:FOLLOW_xmldecl_in_struxt32];
                [self xmldecl];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:9:14: (doctype= DOC )? // block
        NSInteger alt2=2;
        NSInteger LA2_0 = [input LA:1];

        if ( (LA2_0==DOC) ) {
            alt2=1;
        }
        switch (alt2) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:9:14: doctype= DOC // alt
                {
                doctype=(ANTLRCommonToken *)[self match:input TokenType:DOC Follow:FOLLOW_DOC_in_struxt43];   /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
        [self pushFollow:FOLLOW_node_in_struxt52];
        [self node];
        [self popFollow];

          /* element() */
        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_struxt54];   /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return self;
}
/* $ANTLR end struxt */
/*
 * $ANTLR start xmldecl
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:13:1: xmldecl : XML attributes '.' ;
 */
- (void) xmldecl
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:14:5: ( XML attributes '.' ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:14:7: XML attributes '.' // alt
        {
        [self match:input TokenType:XML Follow:FOLLOW_XML_in_xmldecl71];   /* element() */
        [self pushFollow:FOLLOW_attributes_in_xmldecl73];
        [self attributes];
        [self popFollow];

          /* element() */
        [self match:input TokenType:19 Follow:FOLLOW_19_in_xmldecl75];   /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end xmldecl */
/*
 * $ANTLR start node
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:17:1: node : ( tag children | text= value | cdata= CDATA );
 */
- (void) node
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *cdata = nil;
        String text = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:18:5: ( tag children | text= value | cdata= CDATA ) //ruleblock
        NSInteger alt3=3;
        switch ([input LA:1]) {
            case ID: ;
                {
                alt3=1;
                }
                break;
            case STR: ;
            case INT: ;
            case FLOAT: ;
            case CHAR: ;
                {
                alt3=2;
                }
                break;
            case CDATA: ;
                {
                alt3=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:3 state:0 stream:input];
            @throw nvae;
        }

        switch (alt3) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:18:7: tag children // alt
                {
                [self pushFollow:FOLLOW_tag_in_node92];
                [self tag];
                [self popFollow];

                  /* element() */
                [self pushFollow:FOLLOW_children_in_node94];
                [self children];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:19:7: text= value // alt
                {
                [self pushFollow:FOLLOW_value_in_node104];
                text = [self value];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;
            case 3 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:20:7: cdata= CDATA // alt
                {
                cdata=(ANTLRCommonToken *)[self match:input TokenType:CDATA Follow:FOLLOW_CDATA_in_node114];   /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end node */
/*
 * $ANTLR start tag
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:23:1: tag : n= name ( attributes )? ;
 */
- (void) tag
{
    /* ruleScopeSetUp */

    @try {
        StruxtObjCParser_name_return * n = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:24:5: (n= name ( attributes )? ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:24:7: n= name ( attributes )? // alt
        {
        [self pushFollow:FOLLOW_name_in_tag133];
        n = [self name];
        [self popFollow];

          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:24:14: ( attributes )? // block
        NSInteger alt4=2;
        NSInteger LA4_0 = [input LA:1];

        if ( (LA4_0==OP||LA4_0==ID||(LA4_0>=STR && LA4_0<=CHAR)||LA4_0==25||LA4_0==27) ) {
            alt4=1;
        }
        switch (alt4) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:24:14: attributes // alt
                {
                [self pushFollow:FOLLOW_attributes_in_tag135];
                [self attributes];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end tag */
/*
 * $ANTLR start children
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:27:10: fragment children : ( '{' childs '}' | ( ':' ( node )* )? ( '.' | ';' | EOF ) );
 */
- (void) children
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:28:5: ( '{' childs '}' | ( ':' ( node )* )? ( '.' | ';' | EOF ) ) //ruleblock
        NSInteger alt7=2;
        NSInteger LA7_0 = [input LA:1];

        if ( (LA7_0==20) ) {
            alt7=1;
        }
        else if ( (LA7_0==EOF||LA7_0==19||(LA7_0>=22 && LA7_0<=23)) ) {
            alt7=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:0 stream:input];
            @throw nvae;
        }
        switch (alt7) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:28:7: '{' childs '}' // alt
                {
                [self match:input TokenType:20 Follow:FOLLOW_20_in_children154];   /* element() */
                [self pushFollow:FOLLOW_childs_in_children156];
                [self childs];
                [self popFollow];

                  /* element() */
                [self match:input TokenType:21 Follow:FOLLOW_21_in_children158];   /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:29:7: ( ':' ( node )* )? ( '.' | ';' | EOF ) // alt
                {
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:29:7: ( ':' ( node )* )? // block
                NSInteger alt6=2;
                NSInteger LA6_0 = [input LA:1];

                if ( (LA6_0==22) ) {
                    alt6=1;
                }
                switch (alt6) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:29:8: ':' ( node )* // alt
                        {
                        [self match:input TokenType:22 Follow:FOLLOW_22_in_children167];   /* element() */
                        do {
                            NSInteger alt5=2;
                            NSInteger LA5_0 = [input LA:1];
                            if ( (LA5_0==CDATA||LA5_0==ID||(LA5_0>=STR && LA5_0<=CHAR)) ) {
                                alt5=1;
                            }


                            switch (alt5) {
                                case 1 : ;
                                    // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:29:12: node // alt
                                    {
                                    [self pushFollow:FOLLOW_node_in_children169];
                                    [self node];
                                    [self popFollow];

                                      /* element() */
                                     /* elements */
                                    }
                                    break;

                                default :
                                    goto loop5;
                            }
                        } while (YES);
                        loop5: ;
                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                if ([input LA:1] == EOF||[input LA:1] == 19||[input LA:1] == 23) {
                    [input consume];
                    [state setIsErrorRecovery:NO];
                } else {
                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                    @throw mse;
                }
                  /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end children */
/*
 * $ANTLR start childs
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:32:10: fragment childs : ( node )* (nodename= tag )? ;
 */
- (void) childs
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:33:5: ( ( node )* (nodename= tag )? ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:33:7: ( node )* (nodename= tag )? // alt
        {
        do {
            NSInteger alt8=2;
            alt8 = [dfa8 predict:input];
            switch (alt8) {
                case 1 : ;
                    // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:33:7: node // alt
                    {
                    [self pushFollow:FOLLOW_node_in_childs199];
                    [self node];
                    [self popFollow];

                      /* element() */
                     /* elements */
                    }
                    break;

                default :
                    goto loop8;
            }
        } while (YES);
        loop8: ;
          /* element() */
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:33:21: (nodename= tag )? // block
        NSInteger alt9=2;
        NSInteger LA9_0 = [input LA:1];

        if ( (LA9_0==ID) ) {
            alt9=1;
        }
        switch (alt9) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:33:21: nodename= tag // alt
                {
                [self pushFollow:FOLLOW_tag_in_childs204];
                [self tag];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end childs */
/*
 * $ANTLR start attribute
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:36:10: fragment attribute : (n= name (o= OP )? (v= value )? | v= value (o= OP )? (n= name )? | n= name o= OP n1= name | o= OP (n= name | v= value ) );
 */
- (void) attribute
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *o = nil;
        StruxtObjCParser_name_return * n = nil;

        String v = nil;

        StruxtObjCParser_name_return * n1 = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:5: (n= name (o= OP )? (v= value )? | v= value (o= OP )? (n= name )? | n= name o= OP n1= name | o= OP (n= name | v= value ) ) //ruleblock
        NSInteger alt15=4;
        alt15 = [dfa15 predict:input];
        switch (alt15) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:7: n= name (o= OP )? (v= value )? // alt
                {
                [self pushFollow:FOLLOW_name_in_attribute226];
                n = [self name];
                [self popFollow];

                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:15: (o= OP )? // block
                NSInteger alt10=2;
                NSInteger LA10_0 = [input LA:1];

                if ( (LA10_0==OP) ) {
                    alt10=1;
                }
                switch (alt10) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:15: o= OP // alt
                        {
                        o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute230];   /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:21: (v= value )? // block
                NSInteger alt11=2;
                NSInteger LA11_0 = [input LA:1];

                if ( ((LA11_0>=STR && LA11_0<=CHAR)) ) {
                    alt11=1;
                }
                switch (alt11) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:37:21: v= value // alt
                        {
                        [self pushFollow:FOLLOW_value_in_attribute235];
                        v = [self value];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:7: v= value (o= OP )? (n= name )? // alt
                {
                [self pushFollow:FOLLOW_value_in_attribute246];
                v = [self value];
                [self popFollow];

                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:16: (o= OP )? // block
                NSInteger alt12=2;
                NSInteger LA12_0 = [input LA:1];

                if ( (LA12_0==OP) ) {
                    alt12=1;
                }
                switch (alt12) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:16: o= OP // alt
                        {
                        o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute250];   /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:22: (n= name )? // block
                NSInteger alt13=2;
                NSInteger LA13_0 = [input LA:1];

                if ( (LA13_0==ID) ) {
                    alt13=1;
                }
                switch (alt13) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:38:22: n= name // alt
                        {
                        [self pushFollow:FOLLOW_name_in_attribute255];
                        n = [self name];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;
            case 3 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:39:7: n= name o= OP n1= name // alt
                {
                [self pushFollow:FOLLOW_name_in_attribute266];
                n = [self name];
                [self popFollow];

                  /* element() */
                o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute270];   /* element() */
                [self pushFollow:FOLLOW_name_in_attribute274];
                n1 = [self name];
                [self popFollow];

                  /* element() */
                 /* elements */
                }
                break;
            case 4 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:7: o= OP (n= name | v= value ) // alt
                {
                o=(ANTLRCommonToken *)[self match:input TokenType:OP Follow:FOLLOW_OP_in_attribute284];   /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:12: (n= name | v= value ) // block
                NSInteger alt14=2;
                NSInteger LA14_0 = [input LA:1];

                if ( (LA14_0==ID) ) {
                    alt14=1;
                }
                else if ( ((LA14_0>=STR && LA14_0<=CHAR)) ) {
                    alt14=2;
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:14 state:0 stream:input];
                    @throw nvae;
                }
                switch (alt14) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:13: n= name // alt
                        {
                        [self pushFollow:FOLLOW_name_in_attribute289];
                        n = [self name];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;
                    case 2 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:40:20: v= value // alt
                        {
                        [self pushFollow:FOLLOW_value_in_attribute293];
                        v = [self value];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end attribute */
/*
 * $ANTLR start name
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:43:10: fragment name returns [Token namespace, Token nodename] : (s= ns PRENS n= ID | n= ID ( POSTNS s= ns )? ) ;
 */
- (StruxtObjCParser_name_return *) name
{
    /* ruleScopeSetUp */

    StruxtObjCParser_name_return * retval = [StruxtObjCParser_name_return newStruxtObjCParser_name_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonToken *n = nil;
        Token s = nil;


        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:5: ( (s= ns PRENS n= ID | n= ID ( POSTNS s= ns )? ) ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:7: (s= ns PRENS n= ID | n= ID ( POSTNS s= ns )? ) // alt
        {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:7: (s= ns PRENS n= ID | n= ID ( POSTNS s= ns )? ) // block
        NSInteger alt17=2;
        NSInteger LA17_0 = [input LA:1];

        if ( (LA17_0==ID) ) {
            NSInteger LA17_1 = [input LA:2];

            if ( (LA17_1==PRENS) ) {
                alt17=1;
            }
            else if ( (LA17_1==OP||(LA17_1>=ID && LA17_1<=CHAR)||(LA17_1>=19 && LA17_1<=28)) ) {
                alt17=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:17 state:1 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:17 state:0 stream:input];
            @throw nvae;
        }
        switch (alt17) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:8: s= ns PRENS n= ID // alt
                {
                [self pushFollow:FOLLOW_ns_in_name320];
                s = [self ns];
                [self popFollow];

                  /* element() */
                [self match:input TokenType:PRENS Follow:FOLLOW_PRENS_in_name322];   /* element() */
                n=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_name326];   /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:26: n= ID ( POSTNS s= ns )? // alt
                {
                n=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_name332];   /* element() */
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:31: ( POSTNS s= ns )? // block
                NSInteger alt16=2;
                NSInteger LA16_0 = [input LA:1];

                if ( (LA16_0==POSTNS) ) {
                    alt16=1;
                }
                switch (alt16) {
                    case 1 : ;
                        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:44:33: POSTNS s= ns // alt
                        {
                        [self match:input TokenType:POSTNS Follow:FOLLOW_POSTNS_in_name336];   /* element() */
                        [self pushFollow:FOLLOW_ns_in_name340];
                        s = [self ns];
                        [self popFollow];

                          /* element() */
                         /* elements */
                        }
                        break;

                }
                  /* element() */
                 /* elements */
                }
                break;

        }
          /* element() */
         /* elements */
        }

        // token+rule list labels
        [retval setStop:[input LT:-1]];

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return retval;
}
/* $ANTLR end name */
/*
 * $ANTLR start ns
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:47:10: fragment ns returns [Token namespace] : s= ID ;
 */
- (Token) ns
{
    /* ruleScopeSetUp */

    Token namespace = nil;

    @try {
        ANTLRCommonToken *s = nil;

        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:48:5: (s= ID ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:48:7: s= ID // alt
        {
        s=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_ns368];   /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return namespace;
}
/* $ANTLR end ns */
/*
 * $ANTLR start value
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:51:10: fragment value returns [String s] : v= ( STR | INT | FLOAT | CHAR ) ;
 */
- (String) value
{
    /* ruleScopeSetUp */

    String s = nil;

    @try {
        ANTLRCommonToken *v = nil;

        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:52:5: (v= ( STR | INT | FLOAT | CHAR ) ) // ruleBlockSingleAlt
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:52:7: v= ( STR | INT | FLOAT | CHAR ) // alt
        {
        v = (ANTLRCommonToken *)[input LT:1];
        if ((([input LA:1] >= STR) && ([input LA:1] <= CHAR))) {
            [input consume];
            [state setIsErrorRecovery:NO];
        } else {
            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
            @throw mse;
        }
          /* element() */
         /* elements */
        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return s;
}
/* $ANTLR end value */
/*
 * $ANTLR start attributes
 * /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:55:10: fragment attributes : ( attribute ( ',' attribute )* | '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' | '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' );
 */
- (void) attributes
{
    /* ruleScopeSetUp */

    @try {
        // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:56:5: ( attribute ( ',' attribute )* | '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' | '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' ) //ruleblock
        NSInteger alt21=3;
        switch ([input LA:1]) {
            case OP: ;
            case ID: ;
            case STR: ;
            case INT: ;
            case FLOAT: ;
            case CHAR: ;
                {
                alt21=1;
                }
                break;
            case 25: ;
                {
                alt21=2;
                }
                break;
            case 27: ;
                {
                alt21=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:21 state:0 stream:input];
            @throw nvae;
        }

        switch (alt21) {
            case 1 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:56:7: attribute ( ',' attribute )* // alt
                {
                [self pushFollow:FOLLOW_attribute_in_attributes426];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt18=2;
                    NSInteger LA18_0 = [input LA:1];
                    if ( (LA18_0==24) ) {
                        alt18=1;
                    }


                    switch (alt18) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:56:19: ',' attribute // alt
                            {
                            [self match:input TokenType:24 Follow:FOLLOW_24_in_attributes430];   /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes432];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop18;
                    }
                } while (YES);
                loop18: ;
                  /* element() */
                 /* elements */
                }
                break;
            case 2 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:57:7: '(' attribute ( ( ',' | ';' | '.' ) attribute )* ')' // alt
                {
                [self match:input TokenType:25 Follow:FOLLOW_25_in_attributes442];   /* element() */
                [self pushFollow:FOLLOW_attribute_in_attributes444];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt19=2;
                    NSInteger LA19_0 = [input LA:1];
                    if ( (LA19_0==19||(LA19_0>=23 && LA19_0<=24)) ) {
                        alt19=1;
                    }


                    switch (alt19) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:57:23: ( ',' | ';' | '.' ) attribute // alt
                            {
                            if ([input LA:1] == 19||(([input LA:1] >= 23) && ([input LA:1] <= 24))) {
                                [input consume];
                                [state setIsErrorRecovery:NO];
                            } else {
                                ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                @throw mse;
                            }
                              /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes456];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop19;
                    }
                } while (YES);
                loop19: ;
                  /* element() */
                [self match:input TokenType:26 Follow:FOLLOW_26_in_attributes460];   /* element() */
                 /* elements */
                }
                break;
            case 3 : ;
                // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:58:7: '[' attribute ( ( ',' | ';' | '.' ) attribute )* ']' // alt
                {
                [self match:input TokenType:27 Follow:FOLLOW_27_in_attributes468];   /* element() */
                [self pushFollow:FOLLOW_attribute_in_attributes470];
                [self attribute];
                [self popFollow];

                  /* element() */
                do {
                    NSInteger alt20=2;
                    NSInteger LA20_0 = [input LA:1];
                    if ( (LA20_0==19||(LA20_0>=23 && LA20_0<=24)) ) {
                        alt20=1;
                    }


                    switch (alt20) {
                        case 1 : ;
                            // /Users/Shared/Dropbox/workspace/projects/github.com/text-plain/struxt/struxt.parsers/src/main/antlr/StruxtObjC.g:58:23: ( ',' | ';' | '.' ) attribute // alt
                            {
                            if ([input LA:1] == 19||(([input LA:1] >= 23) && ([input LA:1] <= 24))) {
                                [input consume];
                                [state setIsErrorRecovery:NO];
                            } else {
                                ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
                                @throw mse;
                            }
                              /* element() */
                            [self pushFollow:FOLLOW_attribute_in_attributes482];
                            [self attribute];
                            [self popFollow];

                              /* element() */
                             /* elements */
                            }
                            break;

                        default :
                            goto loop20;
                    }
                } while (YES);
                loop20: ;
                  /* element() */
                [self match:input TokenType:28 Follow:FOLLOW_28_in_attributes486];   /* element() */
                 /* elements */
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }    @finally {
    }
    return ;
}
/* $ANTLR end attributes */

@end /* end of StruxtObjCParser implementation line 692 */


/* End of code
 * =============================================================================
 */
